  
    private handleSocketMessage = (event: MessageEvent) => {
      console.log("Received WebSocket Message")
      const text = event.data
      let dataJson;
      if (text === "") return;
      try {
        dataJson = JSON.parse(text);
      } catch (error) {
        console.error('Error parsing JSON:', error);
        return;
      }
      console.log(dataJson);
      const data = Array.isArray(dataJson) ? dataJson : [dataJson];
      const response: any[] = [];
      const defaultSpeed = 100;
  
      data.forEach( async (payload) => {
        console.log(payload);
        payload = payload.command;
        try {
          switch (payload.type) {
            case 'setFlight':
              // var airportOrigin = {
              //     id: payload.airportOrigin.identifier,
              //     nameAbbreviated: payload.airportOrigin.nameAbbreviated,
              //     lat: payload.airportOrigin.lat,
              //     lng: payload.airportOrigin.lng,
              //     time: payload.airportOrigin.time
              // } as Airport;
              // var airportDestination = {
              //     id: payload.airportDestination.identifier,
              //     nameAbbreviated: payload.airportDestination.nameAbbreviated,
              //     lat: payload.airportDestination.lat,
              //     lng: payload.airportDestination.lng,
              //     time: payload.airportDestination.time
              // } as Airport;
  
              var flightData = {
                id: payload.hex,
                flight: payload.flight,
                lat: payload.lat,
                lng: payload.lng,
                rotation: 0,
                airportOrigin: payload.airportOrigin,
                airportDestination: payload.airportDestination,
                aircraftType: payload.aircraftType,
                currentTimestamp: payload.currentTimestamp,
                prevTimestamp: payload.prevTimestamp,
                ground_speed: payload.ground_speed
              } as Flight;
              // Adds Plane, Airports and polyline to map
              this.setState({ Flight: flightData })
              var aircraft = await this.mapRef.current?.addMarkers({ id: flightData.id, param: "aircraft", lat: flightData.lat, lng: flightData.lng, rotation: flightData.rotation ?? 0 });
              if (aircraft) this.state.aircrafts[flightData.id] = aircraft;
              var airportOrigin = await this.mapRef.current?.addMarkers({ id: flightData.airportOrigin.id, param: "airport", lat: flightData.airportOrigin.lat, lng: flightData.airportOrigin.lng, rotation: 0 });
              if (airportOrigin) this.state.airports[flightData.airportOrigin.id] = airportOrigin;
              var airportDestination = await this.mapRef.current?.addMarkers({ id: flightData.airportDestination.id, param: "airport", lat: flightData.airportDestination.lat, lng: flightData.airportDestination.lng, rotation: 0 });
              if (airportDestination) this.state.airports[flightData.airportDestination.id] = airportDestination;
              var polyline = await this.mapRef.current?.drawPolyLine({ aircraftId: flightData.id, airportIdTo: flightData.airportDestination.id, airportIdFrom: flightData.airportOrigin.id });
              if (polyline) this.state.polylines[flightData.id] = polyline;
  
  
              // this.state.markers[flightData.id] = { id: flightData.id, param: "aircraft", lat: flightData.lat, lng: flightData.lng, rotation: payload?.rotation ?? 0 }
              // this.state.markers[flightData.airportOrigin.id] = { id: flightData.airportOrigin.id, param: "airport", lat: flightData.airportOrigin.lat, lng: flightData.airportOrigin.lng, rotation: 0 }
              // this.state.markers[flightData.airportDestination.id] = { id: flightData.airportDestination.id, param: "airport", lat: flightData.airportDestination.lat, lng: flightData.airportDestination.lng, rotation: 0 }
              // this.state.polylines[flightData.id] = 
              // this.mapRef.current?.addMarkers({ id: flightData.id, param: "aircraft", lat: flightData.lat, lng: flightData.lng, rotation: payload?.rotation ?? 0 });
              // this.mapRef.current?.addMarkers({ id: flightData.airportOrigin.id, param: "airport", lat: flightData.airportOrigin.lat, lng: flightData.airportOrigin.lng, rotation: 0 });
              // this.mapRef.current?.addMarkers({ id: flightData.airportDestination.id, param: "airport", lat: flightData.airportDestination.lat, lng: flightData.airportDestination.lng, rotation: 0 });
              // this.mapRef.current?.drawPolyLine({ aircraftId: flightData.id, airportIdTo: flightData.airportDestination.id, airportIdFrom: flightData.airportOrigin.id });
              break;
            case 'updateFlight':
              console.log("updateFlight: ", payload);
              // var airportOrigin = {
              //     id: payload.airportOrigin.identifier,
              //     nameAbbreviated: payload.airportOrigin.nameAbbreviated,
              //     lat: payload.airportOrigin.lat,
              //     lng: payload.airportOrigin.lng,
              //     time: payload.airportOrigin.time
              // } as Airport;
  
              // var airportDestination = {
              //     id: payload.airportDestination.identifier,
              //     nameAbbreviated: payload.airportDestination.nameAbbreviated,
              //     lat: payload.airportDestination.lat,
              //     lng: payload.airportDestination.lng,
              //     time: payload.airportDestination.time
              // } as Airport;
  
              // var flightData = {
              //     id: payload.hex,
              //     flight: payload.flight,
              //     lat: payload.lat,
              //     lng: payload.lng,
              //     rotation: 0,
              //     airportOrigin: payload.airportOrigin,
              //     airportDestination: payload.airportDestination,
              //     aircraftType: payload.aircraftType,
              //     currentTimestamp: payload.currentTimestamp,
              //     prevTimestamp: payload.prevTimestamp,
              //     ground_speed: payload.ground_speed,
              //     traveledKm: payload.traveledKm,
              //     remainingKm: payload.remainingKm
              // } as Flight;
              var flightData = {
                id: payload.hex,
                flight: payload.flight,
                lat: payload.lat,
                lng: payload.lng,
                rotation: 0,
                airportOrigin: payload.airportOrigin,
                airportDestination: payload.airportDestination,
                aircraftType: payload.aircraftType,
                currentTimestamp: payload.currentTimestamp,
                prevTimestamp: payload.prevTimestamp,
                ground_speed: payload.ground_speed
              } as Flight;
              this.setState({ Flight: flightData })
              console.log("traveledKm: ", payload.traveledKm);
              console.log("remainingKm: ", payload.remainingKm);
              console.log("updateMarker Flight State: ", this.state.Flight);
              let update;
              if (flightData.ground_speed) {
                update = await this.mapRef.current?.moveMarkers({ id: flightData.id, lat: flightData.lat, lng: flightData.lng, speed: flightData.ground_speed, prevTimestamp: flightData.prevTimestamp, currentTimestamp: flightData.currentTimestamp });
              } else {
                update = await this.mapRef.current?.moveMarkers({ id: flightData.id, lat: flightData.lat, lng: flightData.lng, speed: defaultSpeed, prevTimestamp: flightData.prevTimestamp, currentTimestamp: flightData.currentTimestamp });
              }
              if(update.marker) this.state.aircrafts[flightData.id] = update.marker
              if(update.polyline) this.state.polylines[flightData.id] = update.polyline
              break;
            case 'removeFlight':
              var id = payload.id;
              this.setState({ Flight: emptyFlight })
              const bool = await this.mapRef.current?.removePolyLine({ id: payload.id })
              if (bool) delete this.state.polylines[payload.id];
              if (this.mapRef.current?.removeMarker({ id: payload.id, param: "aircraft" })) delete this.state.aircrafts[payload.id];
              // if (this.mapRef.current?.removePolyLine({ id: id })) delete this.state.polylines[payload.id];
              // if (this.mapRef.current?.removeMarker({ id: id, param: "aircraft" })) delete this.state.markers[payload.id];
              break;
            // case 'flyToLocation':
            //     // Move camera to given coords and zoom
            //     this.mapRef.current?.flyTo(payload as FlyCameraTo);
            //     break;
            // case 'addMarker':
            //      flightData = payload as MarkerData
            //     if (flightData.id === this.state.Flight.id) {
            //         response.push("Error cant add marker because it is the current flight")
            //         console.warn("Error cant add marker because it is the current flight")
            //         break;
            //     }
            //     this.mapRef.current?.addMarkers(flightData);
            //     break;
            // case 'removeMarker':
            //     flightData = payload as RemoveData
            //     if (flightData.id === this.state.Flight.id) {
            //         response.push("Error cant remove marker because it is the current flight")
            //         console.warn("Error cant remove marker because it is the current flight")
            //         break;
            //     }
            //     this.mapRef.current?.removeMarker(flightData);
            //     break;
            // case 'updateMarker':
            //     flightData = payload as UpdateMarkerData
            //     if (flightData.id === this.state.Flight.id) {
            //         response.push("Error cant update marker because it is the current flight")
            //         console.warn("Error cant update marker because it is the current flight")
            //         break;
            //     }
            //     if(!flightData.speed) flightData.speed = defaultSpeed
            //     this.mapRef.current?.moveMarkers(flightData);
            //     break;
            // case 'addPolyline':
            //     this.mapRef.current?.drawPolyLine(payload as PolyLineData);
            //     break;
            // case 'removePolyline':
            //     this.mapRef.current?.removePolyLine(payload as RemoveData);
            //     break;
            // case 'clearMap':
            //     this.mapRef.current?.clearMap();
            //     break;
            // case 'wellness':
            //     response.push(this.mapRef.current?.sendData(payload as Wellness));
            //     break;
            default:
              console.warn("Unknown type sent: ", payload.type);
          }
        }
        catch (error) {
          console.error('Error:', error);
        }
      });
      if (response.length > 0) {
        this.socket.send(JSON.stringify({ action: 'FrontEndResponse', data: response }));
      }
    }
  